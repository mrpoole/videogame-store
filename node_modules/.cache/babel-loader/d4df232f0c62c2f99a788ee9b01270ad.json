{"ast":null,"code":"import axios from 'axios';\nimport config from '../config';\nconst RAWG_CONFIG = {\n  baseUrl: 'https://rawg-video-games-database.p.rapidapi.com/',\n  headers: {\n    'x-rapidapi-key': config.RAWG_API_KEY,\n    'x-rapidapi-host': 'rawg-video-games-database.p.rapidapi.com',\n    useQueryString: true\n  }\n};\nexport async function getGenreListData() {\n  const options = {\n    method: 'GET',\n    url: 'https://rawg-video-games-database.p.rapidapi.com/genres',\n    headers: {\n      'x-rapidapi-key': config.RAWG_API_KEY,\n      'x-rapidapi-host': 'rawg-video-games-database.p.rapidapi.com'\n    }\n  };\n  let list;\n  await axios.request(options).then(resp => {\n    list = resp.data.results;\n  }).catch(error => {\n    console.error(error);\n  });\n  return list;\n}\nexport async function getGameListData(queryCategory = null, queryItem = null, querySort = null) {\n  // sample url with query string: https://rawg-video-games-database.p.rapidapi.com/games?genres=action\n  const querySearch = queryCategory ? `?${queryCategory}=${queryItem}` : '';\n  const queryOrder = querySort ? `&ordering=${querySort}` : '';\n  const options = {\n    method: 'GET',\n    url: `${RAWG_CONFIG.baseUrl}games${querySearch}${queryOrder}`,\n    headers: RAWG_CONFIG.headers\n  };\n  let list;\n  await axios.request(options).then(resp => {\n    list = resp.data.results;\n  }).catch(error => {});\n  return list;\n}\nexport async function getSingleGameData(id) {\n  const options = {\n    method: 'GET',\n    url: `${RAWG_CONFIG.baseUrl}games/${id}`,\n    headers: RAWG_CONFIG.headers\n  };\n  let item;\n  await axios.request(options).then(resp => {\n    item = resp.data;\n  }).catch(error => {\n    console.error(error);\n  });\n  return item;\n}","map":{"version":3,"sources":["/Users/michellepoole/Desktop/videogame-store/src/actions/rawg-api.js"],"names":["axios","config","RAWG_CONFIG","baseUrl","headers","RAWG_API_KEY","useQueryString","getGenreListData","options","method","url","list","request","then","resp","data","results","catch","error","console","getGameListData","queryCategory","queryItem","querySort","querySearch","queryOrder","getSingleGameData","id","item"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,OAAO,EAAE,mDADS;AAElBC,EAAAA,OAAO,EAAE;AACP,sBAAkBH,MAAM,CAACI,YADlB;AAEP,uBAAmB,0CAFZ;AAGPC,IAAAA,cAAc,EAAE;AAHT;AAFS,CAApB;AASA,OAAO,eAAeC,gBAAf,GAAkC;AACvC,QAAMC,OAAO,GAAG;AACdC,IAAAA,MAAM,EAAE,KADM;AAEdC,IAAAA,GAAG,EAAE,yDAFS;AAGdN,IAAAA,OAAO,EAAE;AACP,wBAAkBH,MAAM,CAACI,YADlB;AAEP,yBAAmB;AAFZ;AAHK,GAAhB;AASA,MAAIM,IAAJ;AAEA,QAAMX,KAAK,CACRY,OADG,CACKJ,OADL,EAEHK,IAFG,CAEGC,IAAD,IAAU;AACdH,IAAAA,IAAI,GAAGG,IAAI,CAACC,IAAL,CAAUC,OAAjB;AACD,GAJG,EAKHC,KALG,CAKIC,KAAD,IAAW;AAChBC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD,GAPG,CAAN;AAQA,SAAOP,IAAP;AACD;AAED,OAAO,eAAeS,eAAf,CACLC,aAAa,GAAG,IADX,EAELC,SAAS,GAAG,IAFP,EAGLC,SAAS,GAAG,IAHP,EAIL;AACA;AACA,QAAMC,WAAW,GAAGH,aAAa,GAAI,IAAGA,aAAc,IAAGC,SAAU,EAAlC,GAAsC,EAAvE;AACA,QAAMG,UAAU,GAAGF,SAAS,GAAI,aAAYA,SAAU,EAA1B,GAA8B,EAA1D;AACA,QAAMf,OAAO,GAAG;AACdC,IAAAA,MAAM,EAAE,KADM;AAEdC,IAAAA,GAAG,EAAG,GAAER,WAAW,CAACC,OAAQ,QAAOqB,WAAY,GAAEC,UAAW,EAF9C;AAGdrB,IAAAA,OAAO,EAAEF,WAAW,CAACE;AAHP,GAAhB;AAMA,MAAIO,IAAJ;AAEA,QAAMX,KAAK,CACRY,OADG,CACKJ,OADL,EAEHK,IAFG,CAEGC,IAAD,IAAU;AACdH,IAAAA,IAAI,GAAGG,IAAI,CAACC,IAAL,CAAUC,OAAjB;AACD,GAJG,EAKHC,KALG,CAKIC,KAAD,IAAW,CACjB,CANG,CAAN;AAOA,SAAOP,IAAP;AACD;AAED,OAAO,eAAee,iBAAf,CAAiCC,EAAjC,EAAqC;AAC1C,QAAMnB,OAAO,GAAG;AACdC,IAAAA,MAAM,EAAE,KADM;AAEdC,IAAAA,GAAG,EAAG,GAAER,WAAW,CAACC,OAAQ,SAAQwB,EAAG,EAFzB;AAGdvB,IAAAA,OAAO,EAAEF,WAAW,CAACE;AAHP,GAAhB;AAMA,MAAIwB,IAAJ;AAEA,QAAM5B,KAAK,CACRY,OADG,CACKJ,OADL,EAEHK,IAFG,CAEGC,IAAD,IAAU;AACdc,IAAAA,IAAI,GAAGd,IAAI,CAACC,IAAZ;AACD,GAJG,EAKHE,KALG,CAKIC,KAAD,IAAW;AAChBC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD,GAPG,CAAN;AAQA,SAAOU,IAAP;AACD","sourcesContent":["import axios from 'axios';\nimport config from '../config';\n\nconst RAWG_CONFIG = {\n  baseUrl: 'https://rawg-video-games-database.p.rapidapi.com/',\n  headers: {\n    'x-rapidapi-key': config.RAWG_API_KEY,\n    'x-rapidapi-host': 'rawg-video-games-database.p.rapidapi.com',\n    useQueryString: true,\n  },\n};\n\nexport async function getGenreListData() {\n  const options = {\n    method: 'GET',\n    url: 'https://rawg-video-games-database.p.rapidapi.com/genres',\n    headers: {\n      'x-rapidapi-key': config.RAWG_API_KEY,\n      'x-rapidapi-host': 'rawg-video-games-database.p.rapidapi.com',\n    },\n  };\n\n  let list;\n\n  await axios\n    .request(options)\n    .then((resp) => {\n      list = resp.data.results;\n    })\n    .catch((error) => {\n      console.error(error);\n    });\n  return list;\n}\n\nexport async function getGameListData(\n  queryCategory = null,\n  queryItem = null,\n  querySort = null\n) {\n  // sample url with query string: https://rawg-video-games-database.p.rapidapi.com/games?genres=action\n  const querySearch = queryCategory ? `?${queryCategory}=${queryItem}` : '';\n  const queryOrder = querySort ? `&ordering=${querySort}` : '';\n  const options = {\n    method: 'GET',\n    url: `${RAWG_CONFIG.baseUrl}games${querySearch}${queryOrder}`,\n    headers: RAWG_CONFIG.headers,\n  };\n\n  let list;\n\n  await axios\n    .request(options)\n    .then((resp) => {\n      list = resp.data.results;\n    })\n    .catch((error) => {\n    });\n  return list;\n}\n\nexport async function getSingleGameData(id) {\n  const options = {\n    method: 'GET',\n    url: `${RAWG_CONFIG.baseUrl}games/${id}`,\n    headers: RAWG_CONFIG.headers,\n  };\n\n  let item;\n\n  await axios\n    .request(options)\n    .then((resp) => {\n      item = resp.data;\n    })\n    .catch((error) => {\n      console.error(error);\n    });\n  return item;\n}\n"]},"metadata":{},"sourceType":"module"}